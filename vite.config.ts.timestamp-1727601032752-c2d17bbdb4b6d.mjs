// vite.config.ts
import { resolve } from "node:path";
import { defineConfig } from "file:///D:/mini-project/tiandao/node_modules/.pnpm/vite@5.4.7_@types+node@20.16.7_sass@1.79.3_terser@5.33.0/node_modules/vite/dist/node/index.js";

// build/vite/plugins/index.ts
import uniPlugin from "file:///D:/mini-project/tiandao/node_modules/.pnpm/@dcloudio+vite-plugin-uni@3.0.0-alpha-4020220240624001_postcss@8.4.47_vite@5.4.7_vue@3.4.21/node_modules/@dcloudio/vite-plugin-uni/dist/index.js";

// build/vite/plugins/autoImport.ts
import AutoImport from "file:///D:/mini-project/tiandao/node_modules/.pnpm/unplugin-auto-import@0.18.3/node_modules/unplugin-auto-import/dist/vite.js";
var AutoImportDeps = () => {
  return AutoImport({
    imports: ["vue", "uni-app", "pinia"],
    dts: "types/auto-imports.d.ts",
    vueTemplate: true
  });
};

// build/vite/plugins/component.ts
import Components from "file:///D:/mini-project/tiandao/node_modules/.pnpm/unplugin-vue-components@0.27.4_vue@3.4.21/node_modules/unplugin-vue-components/dist/vite.js";
var AutoRegistryComponents = () => {
  return Components({
    dts: "types/components.d.ts"
  });
};

// build/vite/plugins/unocss.ts
import UnoCSS from "file:///D:/mini-project/tiandao/node_modules/.pnpm/unocss@0.61.9_postcss@8.4.47_vite@5.4.7/node_modules/unocss/dist/vite.mjs";
var ConfigUnoCSSPlugin = () => {
  return UnoCSS();
};

// build/vite/plugins/index.ts
function createVitePlugins(isBuild) {
  const vitePlugins = [
    // UnoCSS配置
    ConfigUnoCSSPlugin(),
    // 自动按需引入依赖
    AutoImportDeps(),
    // 自动按需引入组件(注意：需注册至 uni 之前，否则不会生效)
    AutoRegistryComponents(),
    // uni支持(兼容性写法，当type为module时，必须要这样写)
    uniPlugin.default()
  ];
  if (isBuild) {
    const buildPlugins = [
      // 图片压缩插件
      // ConfigImageminPlugin(),
      // 图片资源自动转换为网络资源
      // ReplaceUrlPlugin(),
      // 自动清除本地图片
      // CleanImagePlugin()
      // 打包视图分析
      // VisualizerPlugin(),
    ];
    vitePlugins.push(...buildPlugins);
  }
  return vitePlugins;
}

// build/constant.ts
var API_BASE_URL = "/api";
var API_TARGET_URL = "http://localhost:6600";
var MOCK_API_BASE_URL = "/mock/api";
var MOCK_API_TARGET_URL = "http://localhost:3000";

// build/vite/proxy.ts
var init = {
  // test
  [API_BASE_URL]: {
    target: API_TARGET_URL,
    changeOrigin: true,
    rewrite: (path) => path.replace(new RegExp(`^${API_BASE_URL}`), "")
  },
  // mock
  [MOCK_API_BASE_URL]: {
    target: MOCK_API_TARGET_URL,
    changeOrigin: true,
    rewrite: (path) => path.replace(new RegExp(`^${MOCK_API_BASE_URL}`), "/api")
  }
};
var proxy_default = init;

// vite.config.ts
var __vite_injected_original_dirname = "D:\\mini-project\\tiandao";
var vite_config_default = defineConfig(() => {
  const isBuild = process.env.NODE_ENV === "production";
  return {
    resolve: {
      // https://cn.vitejs.dev/config/#resolve-alias
      alias: {
        // 设置别名
        "@": resolve(__vite_injected_original_dirname, "./src")
      }
    },
    // vite 相关配置
    server: {
      port: 6600,
      host: true,
      open: true,
      proxy: proxy_default
    },
    plugins: createVitePlugins(isBuild)
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
